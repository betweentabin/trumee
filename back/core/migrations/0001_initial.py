# Generated by Django 5.0.6 on 2025-08-20 11:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('role', models.CharField(choices=[('user', '求職者'), ('company', '企業')], db_index=True, max_length=10)),
                ('full_name', models.CharField(blank=True, max_length=100)),
                ('kana', models.CharField(blank=True, max_length=100)),
                ('gender', models.CharField(blank=True, choices=[('male', '男性'), ('female', '女性'), ('other', 'その他')], max_length=10)),
                ('company_name', models.CharField(blank=True, db_index=True, max_length=200)),
                ('capital', models.CharField(blank=True, max_length=50)),
                ('company_url', models.URLField(blank=True)),
                ('campaign_code', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_expiry', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'ログイン'), ('logout', 'ログアウト'), ('profile_view', 'プロフィール閲覧'), ('resume_view', '履歴書閲覧'), ('application', '応募'), ('scout', 'スカウト'), ('message', 'メッセージ'), ('search', '検索')], max_length=50)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='targeted_activities', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'activity_logs',
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('matching', 'マッチング'), ('recommendation', '推薦'), ('salary_prediction', '年収予測'), ('success_prediction', '成功確率予測')], max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('model_path', models.CharField(max_length=255)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('training_data_size', models.IntegerField(blank=True, null=True)),
                ('training_date', models.DateTimeField(blank=True, null=True)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ml_models',
                'unique_together': {('model_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MLPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(max_length=50)),
                ('prediction_value', models.FloatField()),
                ('confidence', models.FloatField()),
                ('input_features', models.JSONField(default=dict)),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('feedback', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.mlmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ml_predictions',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('credit', 'クレジットカード'), ('bank', '銀行振込')], max_length=20)),
                ('card_token', models.CharField(blank=True, max_length=255)),
                ('card_last4', models.CharField(blank=True, max_length=4)),
                ('card_brand', models.CharField(blank=True, max_length=20)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('branch_name', models.CharField(blank=True, max_length=100)),
                ('account_type', models.CharField(blank=True, max_length=20)),
                ('account_number', models.CharField(blank=True, max_length=20)),
                ('account_holder', models.CharField(blank=True, max_length=100)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('desired_job', models.CharField(blank=True, max_length=100)),
                ('desired_industries', models.JSONField(blank=True, default=list)),
                ('desired_locations', models.JSONField(blank=True, default=list)),
                ('skills', models.TextField(blank=True)),
                ('self_pr', models.TextField(blank=True)),
                ('resume_vector', models.JSONField(blank=True, default=list)),
                ('match_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'resumes',
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=200)),
                ('period_from', models.DateField()),
                ('period_to', models.DateField(blank=True, null=True)),
                ('employment_type', models.CharField(choices=[('fulltime', '正社員'), ('contract', '契約社員'), ('parttime', 'パート・アルバイト'), ('dispatch', '派遣'), ('other', 'その他')], max_length=20)),
                ('position', models.CharField(blank=True, max_length=100)),
                ('business', models.TextField(blank=True)),
                ('capital', models.CharField(blank=True, max_length=50)),
                ('team_size', models.CharField(blank=True, max_length=50)),
                ('tasks', models.TextField()),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('experience_embeddings', models.JSONField(blank=True, default=dict)),
                ('skill_tags', models.JSONField(blank=True, default=list)),
                ('order', models.IntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='core.resume')),
            ],
            options={
                'db_table': 'experiences',
                'ordering': ['order', '-period_from'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', '未確認'), ('viewed', '確認済み'), ('accepted', '選考中'), ('rejected', '不採用'), ('hired', '採用')], default='pending', max_length=20)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('match_score', models.FloatField(default=0.0)),
                ('recommendation_rank', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_applications', to=settings.AUTH_USER_MODEL)),
                ('resume', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.resume')),
            ],
            options={
                'db_table': 'applications',
            },
        ),
        migrations.CreateModel(
            name='Scout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('sent', '送信済み'), ('viewed', '確認済み'), ('responded', '返信済み'), ('expired', '期限切れ')], default='sent', max_length=20)),
                ('scout_message', models.TextField()),
                ('scouted_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('match_score', models.FloatField(default=0.0)),
                ('success_probability', models.FloatField(default=0.0)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_scouts', to=settings.AUTH_USER_MODEL)),
                ('seeker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_scouts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'scouts',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.application')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('scout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.scout')),
            ],
            options={
                'db_table': 'messages',
            },
        ),
        migrations.CreateModel(
            name='SeekerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('first_name_kana', models.CharField(max_length=50)),
                ('last_name_kana', models.CharField(max_length=50)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('prefecture', models.CharField(blank=True, max_length=20)),
                ('faculty', models.CharField(blank=True, max_length=100)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('experience_years', models.IntegerField(default=0)),
                ('current_salary', models.CharField(blank=True, max_length=50)),
                ('desired_salary', models.CharField(blank=True, max_length=50)),
                ('skill_vector', models.JSONField(blank=True, default=list)),
                ('profile_embeddings', models.JSONField(blank=True, default=dict)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seeker_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'seeker_profiles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email', 'role'], name='users_email_7645ab_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['user', '-created_at'], name='activity_lo_user_id_b8c999_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['action', '-created_at'], name='activity_lo_action_78df1b_idx'),
        ),
        migrations.AddIndex(
            model_name='mlprediction',
            index=models.Index(fields=['user', '-created_at'], name='ml_predicti_user_id_aefcad_idx'),
        ),
        migrations.AddIndex(
            model_name='mlprediction',
            index=models.Index(fields=['model', '-created_at'], name='ml_predicti_model_i_4d0bf8_idx'),
        ),
        migrations.AddIndex(
            model_name='resume',
            index=models.Index(fields=['-submitted_at'], name='resumes_submitt_afd3d7_idx'),
        ),
        migrations.AddIndex(
            model_name='resume',
            index=models.Index(fields=['is_active'], name='resumes_is_acti_a1d0cc_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['status', '-applied_at'], name='application_status_92c333_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['company', 'status'], name='application_company_342cec_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['applicant', '-applied_at'], name='application_applica_737f06_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together={('applicant', 'company')},
        ),
        migrations.AddIndex(
            model_name='scout',
            index=models.Index(fields=['status', '-scouted_at'], name='scouts_status_710b5e_idx'),
        ),
        migrations.AddIndex(
            model_name='scout',
            index=models.Index(fields=['seeker', 'status'], name='scouts_seeker__f5271d_idx'),
        ),
        migrations.AddIndex(
            model_name='scout',
            index=models.Index(fields=['company', '-scouted_at'], name='scouts_company_00f31f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scout',
            unique_together={('company', 'seeker')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['receiver', 'is_read', '-created_at'], name='messages_receive_d8a7eb_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', '-created_at'], name='messages_sender__7375e3_idx'),
        ),
    ]
